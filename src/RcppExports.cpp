// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/icd.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// setDecimalDiag
void setDecimalDiag(Rcpp::RObject& x, bool value);
static SEXP icd_setDecimalDiag_try(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::RObject& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    setDecimalDiag(x, value);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_setDecimalDiag(SEXP xSEXP, SEXP valueSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_setDecimalDiag_try(xSEXP, valueSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// setShortDiag
void setShortDiag(Rcpp::RObject& x, bool value);
static SEXP icd_setShortDiag_try(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::RObject& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    setShortDiag(x, value);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_setShortDiag(SEXP xSEXP, SEXP valueSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_setShortDiag_try(xSEXP, valueSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// asShortDiag
Rcpp::RObject asShortDiag(Rcpp::RObject& x, bool value);
static SEXP icd_asShortDiag_try(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::RObject& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    __result = Rcpp::wrap(asShortDiag(x, value));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_asShortDiag(SEXP xSEXP, SEXP valueSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_asShortDiag_try(xSEXP, valueSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// asDecimalDiag
Rcpp::RObject asDecimalDiag(Rcpp::RObject& x, bool value);
static SEXP icd_asDecimalDiag_try(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::RObject& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    __result = Rcpp::wrap(asDecimalDiag(x, value));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_asDecimalDiag(SEXP xSEXP, SEXP valueSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_asDecimalDiag_try(xSEXP, valueSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd10cmChildrenDefined
Rcpp::CharacterVector icd10cmChildrenDefined(Rcpp::CharacterVector& x);
RcppExport SEXP icd_icd10cmChildrenDefined(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type x(xSEXP);
    __result = Rcpp::wrap(icd10cmChildrenDefined(x));
    return __result;
END_RCPP
}
// icd9ComorbidShortCpp
SEXP icd9ComorbidShortCpp(const SEXP& icd9df, const Rcpp::List& icd9Mapping, const std::string visitId, const std::string icd9Field, const int threads, const int chunk_size, const int omp_chunk_size, bool aggregate);
static SEXP icd_icd9ComorbidShortCpp_try(SEXP icd9dfSEXP, SEXP icd9MappingSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP threadsSEXP, SEXP chunk_sizeSEXP, SEXP omp_chunk_sizeSEXP, SEXP aggregateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type icd9df(icd9dfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type icd9Mapping(icd9MappingSEXP);
    Rcpp::traits::input_parameter< const std::string >::type visitId(visitIdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type icd9Field(icd9FieldSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< const int >::type omp_chunk_size(omp_chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type aggregate(aggregateSEXP);
    __result = Rcpp::wrap(icd9ComorbidShortCpp(icd9df, icd9Mapping, visitId, icd9Field, threads, chunk_size, omp_chunk_size, aggregate));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9ComorbidShortCpp(SEXP icd9dfSEXP, SEXP icd9MappingSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP threadsSEXP, SEXP chunk_sizeSEXP, SEXP omp_chunk_sizeSEXP, SEXP aggregateSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9ComorbidShortCpp_try(icd9dfSEXP, icd9MappingSEXP, visitIdSEXP, icd9FieldSEXP, threadsSEXP, chunk_sizeSEXP, omp_chunk_sizeSEXP, aggregateSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd10_comorbid_parent_search_cpp
Rcpp::LogicalMatrix icd10_comorbid_parent_search_cpp(Rcpp::DataFrame x, Rcpp::List map, std::string visit_name, std::string icd_name);
static SEXP icd_icd10_comorbid_parent_search_cpp_try(SEXP xSEXP, SEXP mapSEXP, SEXP visit_nameSEXP, SEXP icd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type map(mapSEXP);
    Rcpp::traits::input_parameter< std::string >::type visit_name(visit_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type icd_name(icd_nameSEXP);
    __result = Rcpp::wrap(icd10_comorbid_parent_search_cpp(x, map, visit_name, icd_name));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd10_comorbid_parent_search_cpp(SEXP xSEXP, SEXP mapSEXP, SEXP visit_nameSEXP, SEXP icd_nameSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd10_comorbid_parent_search_cpp_try(xSEXP, mapSEXP, visit_nameSEXP, icd_nameSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToCode
Rcpp::CharacterVector icd9MajMinToCode(const Rcpp::CharacterVector major, const Rcpp::CharacterVector minor, bool isShort);
static SEXP icd_icd9MajMinToCode_try(SEXP majorSEXP, SEXP minorSEXP, SEXP isShortSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type major(majorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type minor(minorSEXP);
    Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP);
    __result = Rcpp::wrap(icd9MajMinToCode(major, minor, isShort));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9MajMinToCode(SEXP majorSEXP, SEXP minorSEXP, SEXP isShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9MajMinToCode_try(majorSEXP, minorSEXP, isShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToShort
Rcpp::CharacterVector icd9MajMinToShort(const Rcpp::CharacterVector major, const Rcpp::CharacterVector minor);
static SEXP icd_icd9MajMinToShort_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type major(majorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type minor(minorSEXP);
    __result = Rcpp::wrap(icd9MajMinToShort(major, minor));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9MajMinToShort(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9MajMinToShort_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToDecimal
Rcpp::CharacterVector icd9MajMinToDecimal(const Rcpp::CharacterVector major, const Rcpp::CharacterVector minor);
static SEXP icd_icd9MajMinToDecimal_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type major(majorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type minor(minorSEXP);
    __result = Rcpp::wrap(icd9MajMinToDecimal(major, minor));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9MajMinToDecimal(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9MajMinToDecimal_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9PartsToShort
Rcpp::CharacterVector icd9PartsToShort(const Rcpp::List parts);
static SEXP icd_icd9PartsToShort_try(SEXP partsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::List >::type parts(partsSEXP);
    __result = Rcpp::wrap(icd9PartsToShort(parts));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9PartsToShort(SEXP partsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9PartsToShort_try(partsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9PartsToDecimal
Rcpp::CharacterVector icd9PartsToDecimal(const Rcpp::List parts);
static SEXP icd_icd9PartsToDecimal_try(SEXP partsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::List >::type parts(partsSEXP);
    __result = Rcpp::wrap(icd9PartsToDecimal(parts));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9PartsToDecimal(SEXP partsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9PartsToDecimal_try(partsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToParts
Rcpp::List icd9MajMinToParts(const Rcpp::CharacterVector major, const Rcpp::CharacterVector minor);
static SEXP icd_icd9MajMinToParts_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type major(majorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type minor(minorSEXP);
    __result = Rcpp::wrap(icd9MajMinToParts(major, minor));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9MajMinToParts(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9MajMinToParts_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ShortToPartsCpp
Rcpp::List icd9ShortToPartsCpp(const Rcpp::CharacterVector icd9Short, const Rcpp::String minorEmpty);
static SEXP icd_icd9ShortToPartsCpp_try(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type icd9Short(icd9ShortSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type minorEmpty(minorEmptySEXP);
    __result = Rcpp::wrap(icd9ShortToPartsCpp(icd9Short, minorEmpty));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9ShortToPartsCpp(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9ShortToPartsCpp_try(icd9ShortSEXP, minorEmptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd10ShortToPartsCpp
Rcpp::List icd10ShortToPartsCpp(const Rcpp::CharacterVector x, const Rcpp::String minor_empty);
static SEXP icd_icd10ShortToPartsCpp_try(SEXP xSEXP, SEXP minor_emptySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type minor_empty(minor_emptySEXP);
    __result = Rcpp::wrap(icd10ShortToPartsCpp(x, minor_empty));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd10ShortToPartsCpp(SEXP xSEXP, SEXP minor_emptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd10ShortToPartsCpp_try(xSEXP, minor_emptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9DecimalToPartsCpp
Rcpp::List icd9DecimalToPartsCpp(const Rcpp::CharacterVector icd9Decimal, const Rcpp::String minor_empty);
static SEXP icd_icd9DecimalToPartsCpp_try(SEXP icd9DecimalSEXP, SEXP minor_emptySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type icd9Decimal(icd9DecimalSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type minor_empty(minor_emptySEXP);
    __result = Rcpp::wrap(icd9DecimalToPartsCpp(icd9Decimal, minor_empty));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9DecimalToPartsCpp(SEXP icd9DecimalSEXP, SEXP minor_emptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9DecimalToPartsCpp_try(icd9DecimalSEXP, minor_emptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd10DecimalToPartsCpp
Rcpp::List icd10DecimalToPartsCpp(const Rcpp::CharacterVector x, const Rcpp::String minor_empty);
static SEXP icd_icd10DecimalToPartsCpp_try(SEXP xSEXP, SEXP minor_emptySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type minor_empty(minor_emptySEXP);
    __result = Rcpp::wrap(icd10DecimalToPartsCpp(x, minor_empty));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd10DecimalToPartsCpp(SEXP xSEXP, SEXP minor_emptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd10DecimalToPartsCpp_try(xSEXP, minor_emptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ShortToDecimal
Rcpp::CharacterVector icd9ShortToDecimal(const Rcpp::CharacterVector x);
static SEXP icd_icd9ShortToDecimal_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type x(xSEXP);
    __result = Rcpp::wrap(icd9ShortToDecimal(x));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9ShortToDecimal(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9ShortToDecimal_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9DecimalToShort
Rcpp::CharacterVector icd9DecimalToShort(const Rcpp::CharacterVector x);
static SEXP icd_icd9DecimalToShort_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type x(xSEXP);
    __result = Rcpp::wrap(icd9DecimalToShort(x));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9DecimalToShort(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9DecimalToShort_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9GetMajor
Rcpp::CharacterVector icd9GetMajor(const Rcpp::CharacterVector x, const bool short_code);
static SEXP icd_icd9GetMajor_try(SEXP xSEXP, SEXP short_codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type short_code(short_codeSEXP);
    __result = Rcpp::wrap(icd9GetMajor(x, short_code));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9GetMajor(SEXP xSEXP, SEXP short_codeSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9GetMajor_try(xSEXP, short_codeSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// guessShortCompleteCpp
bool guessShortCompleteCpp(SEXP x_, SEXP short_code, int n, SEXP icd_name);
static SEXP icd_guessShortCompleteCpp_try(SEXP x_SEXP, SEXP short_codeSEXP, SEXP nSEXP, SEXP icd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< SEXP >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type short_code(short_codeSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type icd_name(icd_nameSEXP);
    __result = Rcpp::wrap(guessShortCompleteCpp(x_, short_code, n, icd_name));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_guessShortCompleteCpp(SEXP x_SEXP, SEXP short_codeSEXP, SEXP nSEXP, SEXP icd_nameSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_guessShortCompleteCpp_try(x_SEXP, short_codeSEXP, nSEXP, icd_nameSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// guessShortPlusFactorCpp
bool guessShortPlusFactorCpp(SEXP x_, int n);
static SEXP icd_guessShortPlusFactorCpp_try(SEXP x_SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< SEXP >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(guessShortPlusFactorCpp(x_, n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_guessShortPlusFactorCpp(SEXP x_SEXP, SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_guessShortPlusFactorCpp_try(x_SEXP, nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9_is_n_cpp
std::vector<bool> icd9_is_n_cpp(const std::vector<std::string>& sv);
static SEXP icd_icd9_is_n_cpp_try(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sv(svSEXP);
    __result = Rcpp::wrap(icd9_is_n_cpp(sv));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9_is_n_cpp(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9_is_n_cpp_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9_is_v_cpp
std::vector<bool> icd9_is_v_cpp(const std::vector<std::string>& sv);
static SEXP icd_icd9_is_v_cpp_try(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sv(svSEXP);
    __result = Rcpp::wrap(icd9_is_v_cpp(sv));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9_is_v_cpp(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9_is_v_cpp_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9_is_e_cpp
std::vector<bool> icd9_is_e_cpp(const std::vector<std::string>& sv);
static SEXP icd_icd9_is_e_cpp_try(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sv(svSEXP);
    __result = Rcpp::wrap(icd9_is_e_cpp(sv));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9_is_e_cpp(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9_is_e_cpp_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9LongToWideCpp
Rcpp::CharacterVector icd9LongToWideCpp(const SEXP& icd9df, const std::string visitId, const std::string icd9Field, bool aggregate);
static SEXP icd_icd9LongToWideCpp_try(SEXP icd9dfSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP aggregateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type icd9df(icd9dfSEXP);
    Rcpp::traits::input_parameter< const std::string >::type visitId(visitIdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type icd9Field(icd9FieldSEXP);
    Rcpp::traits::input_parameter< bool >::type aggregate(aggregateSEXP);
    __result = Rcpp::wrap(icd9LongToWideCpp(icd9df, visitId, icd9Field, aggregate));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9LongToWideCpp(SEXP icd9dfSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP aggregateSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9LongToWideCpp_try(icd9dfSEXP, visitIdSEXP, icd9FieldSEXP, aggregateSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesMajorSingle
Rcpp::String icd9AddLeadingZeroesMajorSingle(Rcpp::String major);
static SEXP icd_icd9AddLeadingZeroesMajorSingle_try(SEXP majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::String >::type major(majorSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroesMajorSingle(major));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9AddLeadingZeroesMajorSingle(SEXP majorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9AddLeadingZeroesMajorSingle_try(majorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesMajorSingleStd
std::string icd9AddLeadingZeroesMajorSingleStd(std::string m);
static SEXP icd_icd9AddLeadingZeroesMajorSingleStd_try(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::string >::type m(mSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroesMajorSingleStd(m));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9AddLeadingZeroesMajorSingleStd(SEXP mSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9AddLeadingZeroesMajorSingleStd_try(mSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesMajor
Rcpp::CharacterVector icd9AddLeadingZeroesMajor(Rcpp::CharacterVector major);
static SEXP icd_icd9AddLeadingZeroesMajor_try(SEXP majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type major(majorSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroesMajor(major));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9AddLeadingZeroesMajor(SEXP majorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9AddLeadingZeroesMajor_try(majorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroes
Rcpp::CharacterVector icd9AddLeadingZeroes(Rcpp::CharacterVector x, bool short_code);
static SEXP icd_icd9AddLeadingZeroes_try(SEXP xSEXP, SEXP short_codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type short_code(short_codeSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroes(x, short_code));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9AddLeadingZeroes(SEXP xSEXP, SEXP short_codeSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9AddLeadingZeroes_try(xSEXP, short_codeSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ExpandMinorShim
Rcpp::CharacterVector icd9ExpandMinorShim(std::string minor, bool isE);
static SEXP icd_icd9ExpandMinorShim_try(SEXP minorSEXP, SEXP isESEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::string >::type minor(minorSEXP);
    Rcpp::traits::input_parameter< bool >::type isE(isESEXP);
    __result = Rcpp::wrap(icd9ExpandMinorShim(minor, isE));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9ExpandMinorShim(SEXP minorSEXP, SEXP isESEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9ExpandMinorShim_try(minorSEXP, isESEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ChildrenShortCpp
Rcpp::CharacterVector icd9ChildrenShortCpp(Rcpp::CharacterVector icd9Short, bool onlyReal);
static SEXP icd_icd9ChildrenShortCpp_try(SEXP icd9ShortSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9Short(icd9ShortSEXP);
    Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP);
    __result = Rcpp::wrap(icd9ChildrenShortCpp(icd9Short, onlyReal));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9ChildrenShortCpp(SEXP icd9ShortSEXP, SEXP onlyRealSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9ChildrenShortCpp_try(icd9ShortSEXP, onlyRealSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ChildrenDecimalCpp
Rcpp::CharacterVector icd9ChildrenDecimalCpp(Rcpp::CharacterVector icd9Decimal, bool onlyReal);
static SEXP icd_icd9ChildrenDecimalCpp_try(SEXP icd9DecimalSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9Decimal(icd9DecimalSEXP);
    Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP);
    __result = Rcpp::wrap(icd9ChildrenDecimalCpp(icd9Decimal, onlyReal));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9ChildrenDecimalCpp(SEXP icd9DecimalSEXP, SEXP onlyRealSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9ChildrenDecimalCpp_try(icd9DecimalSEXP, onlyRealSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ChildrenCpp
Rcpp::CharacterVector icd9ChildrenCpp(Rcpp::CharacterVector icd9, bool isShort, bool onlyReal);
static SEXP icd_icd9ChildrenCpp_try(SEXP icd9SEXP, SEXP isShortSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9(icd9SEXP);
    Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP);
    Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP);
    __result = Rcpp::wrap(icd9ChildrenCpp(icd9, isShort, onlyReal));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9ChildrenCpp(SEXP icd9SEXP, SEXP isShortSEXP, SEXP onlyRealSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9ChildrenCpp_try(icd9SEXP, isShortSEXP, onlyRealSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd_in_reference_code
Rcpp::LogicalVector icd_in_reference_code(Rcpp::CharacterVector icd, Rcpp::CharacterVector icd_reference, bool short_code, bool short_reference);
static SEXP icd_icd_in_reference_code_try(SEXP icdSEXP, SEXP icd_referenceSEXP, SEXP short_codeSEXP, SEXP short_referenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd(icdSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd_reference(icd_referenceSEXP);
    Rcpp::traits::input_parameter< bool >::type short_code(short_codeSEXP);
    Rcpp::traits::input_parameter< bool >::type short_reference(short_referenceSEXP);
    __result = Rcpp::wrap(icd_in_reference_code(icd, icd_reference, short_code, short_reference));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd_in_reference_code(SEXP icdSEXP, SEXP icd_referenceSEXP, SEXP short_codeSEXP, SEXP short_referenceSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd_in_reference_code_try(icdSEXP, icd_referenceSEXP, short_codeSEXP, short_referenceSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// trimLeftCpp
std::string trimLeftCpp(std::string s);
static SEXP icd_trimLeftCpp_try(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    __result = Rcpp::wrap(trimLeftCpp(s));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_trimLeftCpp(SEXP sSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_trimLeftCpp_try(sSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// strimCpp
std::string strimCpp(std::string s);
static SEXP icd_strimCpp_try(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    __result = Rcpp::wrap(strimCpp(s));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_strimCpp(SEXP sSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_strimCpp_try(sSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// trimCpp
std::vector<std::string> trimCpp(std::vector<std::string> sv);
static SEXP icd_trimCpp_try(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sv(svSEXP);
    __result = Rcpp::wrap(trimCpp(sv));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_trimCpp(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_trimCpp_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// getOmpCores
int getOmpCores();
static SEXP icd_getOmpCores_try() {
BEGIN_RCPP
    Rcpp::RObject __result;
    __result = Rcpp::wrap(getOmpCores());
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_getOmpCores() {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_getOmpCores_try());
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// getOmpMaxThreads
int getOmpMaxThreads();
static SEXP icd_getOmpMaxThreads_try() {
BEGIN_RCPP
    Rcpp::RObject __result;
    __result = Rcpp::wrap(getOmpMaxThreads());
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_getOmpMaxThreads() {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_getOmpMaxThreads_try());
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// getOmpThreads
int getOmpThreads();
static SEXP icd_getOmpThreads_try() {
BEGIN_RCPP
    Rcpp::RObject __result;
    __result = Rcpp::wrap(getOmpThreads());
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_getOmpThreads() {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_getOmpThreads_try());
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// randomMajorCpp
Rcpp::NumericVector randomMajorCpp(int n);
static SEXP icd_randomMajorCpp_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(randomMajorCpp(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_randomMajorCpp(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_randomMajorCpp_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9RandomShortN
std::vector<std::string> icd9RandomShortN(std::vector<std::string>::size_type n);
static SEXP icd_icd9RandomShortN_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string>::size_type >::type n(nSEXP);
    __result = Rcpp::wrap(icd9RandomShortN(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9RandomShortN(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9RandomShortN_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9RandomShortV
std::vector<std::string> icd9RandomShortV(std::vector<std::string>::size_type n);
static SEXP icd_icd9RandomShortV_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string>::size_type >::type n(nSEXP);
    __result = Rcpp::wrap(icd9RandomShortV(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9RandomShortV(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9RandomShortV_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9RandomShortE
std::vector<std::string> icd9RandomShortE(std::vector<std::string>::size_type n);
static SEXP icd_icd9RandomShortE_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string>::size_type >::type n(nSEXP);
    __result = Rcpp::wrap(icd9RandomShortE(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9RandomShortE(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9RandomShortE_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9RandomShort
std::vector<std::string> icd9RandomShort(std::vector<std::string>::size_type n);
static SEXP icd_icd9RandomShort_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string>::size_type >::type n(nSEXP);
    __result = Rcpp::wrap(icd9RandomShort(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9RandomShort(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9RandomShort_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// fastIntToStringStd
std::vector<std::string> fastIntToStringStd(std::vector<int> x);
static SEXP icd_fastIntToStringStd_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    __result = Rcpp::wrap(fastIntToStringStd(x));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_fastIntToStringStd(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_fastIntToStringStd_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// fastIntToStringRcpp
Rcpp::CharacterVector fastIntToStringRcpp(Rcpp::IntegerVector x);
static SEXP icd_fastIntToStringRcpp_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    __result = Rcpp::wrap(fastIntToStringRcpp(x));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_fastIntToStringRcpp(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_fastIntToStringRcpp_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// valgrindCallgrindStart
int valgrindCallgrindStart(bool zerostats);
static SEXP icd_valgrindCallgrindStart_try(SEXP zerostatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< bool >::type zerostats(zerostatsSEXP);
    __result = Rcpp::wrap(valgrindCallgrindStart(zerostats));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_valgrindCallgrindStart(SEXP zerostatsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_valgrindCallgrindStart_try(zerostatsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// valgrindCallgrindStop
int valgrindCallgrindStop();
static SEXP icd_valgrindCallgrindStop_try() {
BEGIN_RCPP
    Rcpp::RObject __result;
    __result = Rcpp::wrap(valgrindCallgrindStop());
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_valgrindCallgrindStop() {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_valgrindCallgrindStop_try());
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9SortCpp
std::vector<std::string> icd9SortCpp(std::vector<std::string> x);
static SEXP icd_icd9SortCpp_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    __result = Rcpp::wrap(icd9SortCpp(x));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9SortCpp(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9SortCpp_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9OrderCpp
std::vector<std::size_t> icd9OrderCpp(std::vector<std::string> x);
static SEXP icd_icd9OrderCpp_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    __result = Rcpp::wrap(icd9OrderCpp(x));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd_icd9OrderCpp(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd_icd9OrderCpp_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int icd_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("void(*.attr_decimal_diag)(Rcpp::RObject&,bool)");
        signatures.insert("void(*.attr_short_diag)(Rcpp::RObject&,bool)");
        signatures.insert("Rcpp::RObject(*as.icd_short_diag)(Rcpp::RObject&,bool)");
        signatures.insert("Rcpp::RObject(*as.icd_decimal_diag)(Rcpp::RObject&,bool)");
        signatures.insert("SEXP(*icd9ComorbidShortCpp)(const SEXP&,const Rcpp::List&,const std::string,const std::string,const int,const int,const int,bool)");
        signatures.insert("Rcpp::LogicalMatrix(*icd10_comorbid_parent_search_cpp)(Rcpp::DataFrame,Rcpp::List,std::string,std::string)");
        signatures.insert("Rcpp::CharacterVector(*icd9MajMinToCode)(const Rcpp::CharacterVector,const Rcpp::CharacterVector,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9MajMinToShort)(const Rcpp::CharacterVector,const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9MajMinToDecimal)(const Rcpp::CharacterVector,const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9PartsToShort)(const Rcpp::List)");
        signatures.insert("Rcpp::CharacterVector(*icd9PartsToDecimal)(const Rcpp::List)");
        signatures.insert("Rcpp::List(*icd9MajMinToParts)(const Rcpp::CharacterVector,const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::List(*icd9ShortToPartsCpp)(const Rcpp::CharacterVector,const Rcpp::String)");
        signatures.insert("Rcpp::List(*icd_short_to_parts.icd10)(const Rcpp::CharacterVector,const Rcpp::String)");
        signatures.insert("Rcpp::List(*icd9DecimalToPartsCpp)(const Rcpp::CharacterVector,const Rcpp::String)");
        signatures.insert("Rcpp::List(*icd_decimal_to_parts.icd10)(const Rcpp::CharacterVector,const Rcpp::String)");
        signatures.insert("Rcpp::CharacterVector(*icd9_short_to_decimal_cpp)(const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9_decimal_to_short_cpp)(const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd_get_major.icd9)(const Rcpp::CharacterVector,const bool)");
        signatures.insert("bool(*icd_guess_short)(SEXP,SEXP,int,SEXP)");
        signatures.insert("bool(*guessShortPlusFactorCpp)(SEXP,int)");
        signatures.insert("std::vector<bool>(*icd9_is_n_cpp)(const std::vector<std::string>&)");
        signatures.insert("std::vector<bool>(*icd9_is_v_cpp)(const std::vector<std::string>&)");
        signatures.insert("std::vector<bool>(*icd9_is_e_cpp)(const std::vector<std::string>&)");
        signatures.insert("Rcpp::CharacterVector(*icd_long_to_wide_cpp)(const SEXP&,const std::string,const std::string,bool)");
        signatures.insert("Rcpp::String(*icd9AddLeadingZeroesMajorSingle)(Rcpp::String)");
        signatures.insert("std::string(*icd9AddLeadingZeroesMajorSingleStd)(std::string)");
        signatures.insert("Rcpp::CharacterVector(*icd9_add_leading_zeroes_major)(Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9_add_leading_zeroes_cpp)(Rcpp::CharacterVector,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9ExpandMinorShim)(std::string,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9ChildrenShortCpp)(Rcpp::CharacterVector,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9ChildrenDecimalCpp)(Rcpp::CharacterVector,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9ChildrenCpp)(Rcpp::CharacterVector,bool,bool)");
        signatures.insert("Rcpp::LogicalVector(*icd_in_reference_code)(Rcpp::CharacterVector,Rcpp::CharacterVector,bool,bool)");
        signatures.insert("std::string(*trimLeftCpp)(std::string)");
        signatures.insert("std::string(*strimCpp)(std::string)");
        signatures.insert("std::vector<std::string>(*trimCpp)(std::vector<std::string>)");
        signatures.insert("int(*getOmpCores)()");
        signatures.insert("int(*getOmpMaxThreads)()");
        signatures.insert("int(*getOmpThreads)()");
        signatures.insert("Rcpp::NumericVector(*randomMajorCpp)(int)");
        signatures.insert("std::vector<std::string>(*icd9RandomShortN)(std::vector<std::string>::size_type)");
        signatures.insert("std::vector<std::string>(*icd9RandomShortV)(std::vector<std::string>::size_type)");
        signatures.insert("std::vector<std::string>(*icd9RandomShortE)(std::vector<std::string>::size_type)");
        signatures.insert("std::vector<std::string>(*icd9RandomShort)(std::vector<std::string>::size_type)");
        signatures.insert("std::vector<std::string>(*fastIntToStringStd)(std::vector<int>)");
        signatures.insert("Rcpp::CharacterVector(*fastIntToStringRcpp)(Rcpp::IntegerVector)");
        signatures.insert("int(*valgrindCallgrindStart)(bool)");
        signatures.insert("int(*valgrindCallgrindStop)()");
        signatures.insert("std::vector<std::string>(*icd9_sort_cpp)(std::vector<std::string>)");
        signatures.insert("std::vector<std::size_t>(*icd9_order_cpp)(std::vector<std::string>)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP icd_RcppExport_registerCCallable() { 
    R_RegisterCCallable("icd", "icd_.attr_decimal_diag", (DL_FUNC)icd_setDecimalDiag_try);
    R_RegisterCCallable("icd", "icd_.attr_short_diag", (DL_FUNC)icd_setShortDiag_try);
    R_RegisterCCallable("icd", "icd_as.icd_short_diag", (DL_FUNC)icd_asShortDiag_try);
    R_RegisterCCallable("icd", "icd_as.icd_decimal_diag", (DL_FUNC)icd_asDecimalDiag_try);
    R_RegisterCCallable("icd", "icd_icd9ComorbidShortCpp", (DL_FUNC)icd_icd9ComorbidShortCpp_try);
    R_RegisterCCallable("icd", "icd_icd10_comorbid_parent_search_cpp", (DL_FUNC)icd_icd10_comorbid_parent_search_cpp_try);
    R_RegisterCCallable("icd", "icd_icd9MajMinToCode", (DL_FUNC)icd_icd9MajMinToCode_try);
    R_RegisterCCallable("icd", "icd_icd9MajMinToShort", (DL_FUNC)icd_icd9MajMinToShort_try);
    R_RegisterCCallable("icd", "icd_icd9MajMinToDecimal", (DL_FUNC)icd_icd9MajMinToDecimal_try);
    R_RegisterCCallable("icd", "icd_icd9PartsToShort", (DL_FUNC)icd_icd9PartsToShort_try);
    R_RegisterCCallable("icd", "icd_icd9PartsToDecimal", (DL_FUNC)icd_icd9PartsToDecimal_try);
    R_RegisterCCallable("icd", "icd_icd9MajMinToParts", (DL_FUNC)icd_icd9MajMinToParts_try);
    R_RegisterCCallable("icd", "icd_icd9ShortToPartsCpp", (DL_FUNC)icd_icd9ShortToPartsCpp_try);
    R_RegisterCCallable("icd", "icd_icd_short_to_parts.icd10", (DL_FUNC)icd_icd10ShortToPartsCpp_try);
    R_RegisterCCallable("icd", "icd_icd9DecimalToPartsCpp", (DL_FUNC)icd_icd9DecimalToPartsCpp_try);
    R_RegisterCCallable("icd", "icd_icd_decimal_to_parts.icd10", (DL_FUNC)icd_icd10DecimalToPartsCpp_try);
    R_RegisterCCallable("icd", "icd_icd9_short_to_decimal_cpp", (DL_FUNC)icd_icd9ShortToDecimal_try);
    R_RegisterCCallable("icd", "icd_icd9_decimal_to_short_cpp", (DL_FUNC)icd_icd9DecimalToShort_try);
    R_RegisterCCallable("icd", "icd_icd_get_major.icd9", (DL_FUNC)icd_icd9GetMajor_try);
    R_RegisterCCallable("icd", "icd_icd_guess_short", (DL_FUNC)icd_guessShortCompleteCpp_try);
    R_RegisterCCallable("icd", "icd_guessShortPlusFactorCpp", (DL_FUNC)icd_guessShortPlusFactorCpp_try);
    R_RegisterCCallable("icd", "icd_icd9_is_n_cpp", (DL_FUNC)icd_icd9_is_n_cpp_try);
    R_RegisterCCallable("icd", "icd_icd9_is_v_cpp", (DL_FUNC)icd_icd9_is_v_cpp_try);
    R_RegisterCCallable("icd", "icd_icd9_is_e_cpp", (DL_FUNC)icd_icd9_is_e_cpp_try);
    R_RegisterCCallable("icd", "icd_icd_long_to_wide_cpp", (DL_FUNC)icd_icd9LongToWideCpp_try);
    R_RegisterCCallable("icd", "icd_icd9AddLeadingZeroesMajorSingle", (DL_FUNC)icd_icd9AddLeadingZeroesMajorSingle_try);
    R_RegisterCCallable("icd", "icd_icd9AddLeadingZeroesMajorSingleStd", (DL_FUNC)icd_icd9AddLeadingZeroesMajorSingleStd_try);
    R_RegisterCCallable("icd", "icd_icd9_add_leading_zeroes_major", (DL_FUNC)icd_icd9AddLeadingZeroesMajor_try);
    R_RegisterCCallable("icd", "icd_icd9_add_leading_zeroes_cpp", (DL_FUNC)icd_icd9AddLeadingZeroes_try);
    R_RegisterCCallable("icd", "icd_icd9ExpandMinorShim", (DL_FUNC)icd_icd9ExpandMinorShim_try);
    R_RegisterCCallable("icd", "icd_icd9ChildrenShortCpp", (DL_FUNC)icd_icd9ChildrenShortCpp_try);
    R_RegisterCCallable("icd", "icd_icd9ChildrenDecimalCpp", (DL_FUNC)icd_icd9ChildrenDecimalCpp_try);
    R_RegisterCCallable("icd", "icd_icd9ChildrenCpp", (DL_FUNC)icd_icd9ChildrenCpp_try);
    R_RegisterCCallable("icd", "icd_icd_in_reference_code", (DL_FUNC)icd_icd_in_reference_code_try);
    R_RegisterCCallable("icd", "icd_trimLeftCpp", (DL_FUNC)icd_trimLeftCpp_try);
    R_RegisterCCallable("icd", "icd_strimCpp", (DL_FUNC)icd_strimCpp_try);
    R_RegisterCCallable("icd", "icd_trimCpp", (DL_FUNC)icd_trimCpp_try);
    R_RegisterCCallable("icd", "icd_getOmpCores", (DL_FUNC)icd_getOmpCores_try);
    R_RegisterCCallable("icd", "icd_getOmpMaxThreads", (DL_FUNC)icd_getOmpMaxThreads_try);
    R_RegisterCCallable("icd", "icd_getOmpThreads", (DL_FUNC)icd_getOmpThreads_try);
    R_RegisterCCallable("icd", "icd_randomMajorCpp", (DL_FUNC)icd_randomMajorCpp_try);
    R_RegisterCCallable("icd", "icd_icd9RandomShortN", (DL_FUNC)icd_icd9RandomShortN_try);
    R_RegisterCCallable("icd", "icd_icd9RandomShortV", (DL_FUNC)icd_icd9RandomShortV_try);
    R_RegisterCCallable("icd", "icd_icd9RandomShortE", (DL_FUNC)icd_icd9RandomShortE_try);
    R_RegisterCCallable("icd", "icd_icd9RandomShort", (DL_FUNC)icd_icd9RandomShort_try);
    R_RegisterCCallable("icd", "icd_fastIntToStringStd", (DL_FUNC)icd_fastIntToStringStd_try);
    R_RegisterCCallable("icd", "icd_fastIntToStringRcpp", (DL_FUNC)icd_fastIntToStringRcpp_try);
    R_RegisterCCallable("icd", "icd_valgrindCallgrindStart", (DL_FUNC)icd_valgrindCallgrindStart_try);
    R_RegisterCCallable("icd", "icd_valgrindCallgrindStop", (DL_FUNC)icd_valgrindCallgrindStop_try);
    R_RegisterCCallable("icd", "icd_icd9_sort_cpp", (DL_FUNC)icd_icd9SortCpp_try);
    R_RegisterCCallable("icd", "icd_icd9_order_cpp", (DL_FUNC)icd_icd9OrderCpp_try);
    R_RegisterCCallable("icd", "icd_RcppExport_validate", (DL_FUNC)icd_RcppExport_validate);
    return R_NilValue;
}
